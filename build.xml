<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string 
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="../ant-salesforce.jar" />        	
        </classpath>
    </taskdef>
	
    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
        <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deployUnpackaged">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="retrieveUnpackaged" rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000" rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" rollbackOnError="true">
      	<!-- <runTest></runTest> -->
      </sf:deploy>
    </target>
	
	 <!-- Shows deploying code with no TestLevel sepcified -->
    <target name="deployCodeNoTestLevelSpecified">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"/>
    </target>
	
	<!-- Shows deploying code and running tests only within the org namespace -->
	<target name="deployCodeRunLocalTests">
	  <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"  testlevel="RunLocalTests"/>
	</target>
	
    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="src/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "codepkg" package, running all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" checkOnly="true"/>
    </target>
	
	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<target name="quickDeploy">
	  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target>
	
	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target>

	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>
    </target>
	
	<target name="getBranchDiff">
		<exec executable="/bin/bash" osfamily="unix">
            <arg value="get_diff_branches.sh" />
			<arg value="${sf.branchName}" />
        </exec>
	</target>
	
	<!-- Deploy Only 1 class-->
	<target name="DeployPartial">
    <delete file="deploy.zip"/>
	<zip destfile="deploy.zip">
		<!-- Append all the components that needs to be deployed in the Partial Deployment-->
		
<!--<fileset dir="CRMQ2O\src" includes="objects/Account.object"/>
<fileset dir="CRMQ2O\src" includes="objects/Campaign.object"/>
<fileset dir="CRMQ2O\src" includes="classes/SWT_emailQuotesToPartners_CSV_TEST.* "/>
<fileset dir="CRMQ2O\src" includes="components/SWT_CancelComponent.* "/>
<fileset dir="CRMQ2O\src" includes="customMetadata/SWT_Subsidiary_To_Country_Mapping.CR_2.md "/>
<fileset dir="CRMQ2O\src" includes="customMetadata/SWT_Subsidiary_To_Country_Mapping.KZ.md "/>
<fileset dir="CRMQ2O\src" includes="customMetadata/SWT_Subsidiary_To_Country_Mapping.VG.md "/>
<fileset dir="CRMQ2O\src" includes="email/SWT_Email_Templates/Approval_Cancellation_Email.* "/>
<fileset dir="CRMQ2O\src" includes="email/unfiled$public/SWT_PartnerRegAgmtActivatedTemplate.* "/>
<fileset dir="CRMQ2O\src" includes="globalValueSets/SWT_Support_Entitlement_System.globalValueSet"/>
<fileset dir="CRMQ2O\src" includes="layouts/Account-Account*.layout"/>
<fileset dir="CRMQ2O\src" includes="layouts/Zuora__Subscription__c-Zuora__Subscription*.layout"/>
<fileset dir="CRMQ2O\src" includes="matchingRules/Contact.matchingRule"/>
<fileset dir="CRMQ2O\src" includes="pages/SWT_QuoteSubmitForApprovalVFPage.*"/>
<fileset dir="CRMQ2O\src" includes="permissionsets/SWT_LV_Managers.permissionset"/>
<fileset dir="CRMQ2O\src" includes="remoteSiteSettings/SWT_Netsuite_To_Account.remoteSite"/>
<fileset dir="CRMQ2O\src" includes="reports/unfiled$public/SWT_Approval_Request_History_Report.report"/>
<fileset dir="CRMQ2O\src" includes="sharingRules/Apttus_Proposal__Proposal__c.sharingRules"/>
<fileset dir="CRMQ2O\src" includes="staticresources/SWT_SLDS.resource"/>
<fileset dir="CRMQ2O\src" includes="staticresources/SWT_SLDS.resource-meta.xml"/>
<fileset dir="CRMQ2O\src" includes="tabs/PS_Approval_Configuration__c.tab"/>
<fileset dir="CRMQ2O\src" includes="triggers/SWT_ContactTrigger.*"/>
<fileset dir="CRMQ2O\src" includes="workflows/Account.workflow"/>
<fileset dir="CRMQ2O\src" includes="globalValueSets/SWT_CMT_1.globalValueSet"/> 
<fileset dir="CRMQ2O\src" includes="layouts/Opportunity-Partner*.layout"/>
<fileset dir="CRMQ2O\src" includes="email/MDF_Templates/SWT_MDF_Claim_Paid.*"/> -->
<!--<fileset dir="CRMQ2O\src" includes="layouts/Deal_Registration__c-Deal*.layout"/>-->


<fileset dir="src" includes="package.xml"/>
<fileset dir="src" includes="classes/PenaltySuspensionsTest.cls"/>
<fileset dir="src" includes="classes/PenaltySuspensionsTest.cls-meta.xml"/>
<fileset dir="src" includes="aura/POC_Accordian"/>
</zip>
<echo message = "${sf.username}" />
<sf:deploy zipFile="deploy.zip" allowMissingFiles="true" username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll ="${sf.maxPoll}" rollbackOnError="true" > 

<!--<runTest>SWT_PricingCallbackTest</runTest>
<runTest>SWT_PartnerRegistrationExtensionTest</runTest>
 <runTest>SWT_AssetLineItem_Trigger_Handler_Test</runTest>
<runTest>SWT_BatchForOrderQuoteVisibilityTest</runTest> 
<runTest>SWT_CommonJavaButton_Test</runTest> 
<runTest>SWT_PartnerReg_Helper_Test</runTest> 
<runTest>SWT_SWT_PartnerReg_Helper_Test</runTest> 
<runTest>SWT_QuoteHelperTest</runTest> 
<runTest>SWT_ValidationCallBackTest</runTest> 
<runTest>SWT_RetryOrderToMulesoftTest_v2</runTest>
-->

</sf:deploy>
</target>
<target name="Deploy">
<echo message = "${sf.username}" />
<sf:deploy zipFile="deploy.zip" allowMissingFiles="true" username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll ="${sf.maxPoll}" checkOnly="true">
<!--<runTest>SWT_BatchCreateEntitlements_Test</runTest>
<runTest>SWT_AgreementSharing_TEST</runTest>
<runTest>SWT_ApttusAgreementTriggerTest</runTest>
<runTest>SWT_AssetLineItemCallBack_Test</runTest>
<runTest>SWT_BatchActivateAssetLineItemTest</runTest>
<runTest>SWT_CommonJavaButton_Test</runTest>
<runTest>SWT_DynamicChevronController_Test</runTest>
<runTest>SWT_Opportunity_HelperTest</runTest>
<runTest>SWT_OrderHelperTest</runTest>
<runTest>SWT_ProductFilterCallbackTest</runTest>
<runTest>SWT_QuoteHelperTest</runTest>
<runTest>SWT_UtilSetTestData</runTest>
<runTest>SWT_ValidationCallbackTest</runTest> -->
</sf:deploy>
</target>
</project>